.program spi3wire
.side_set 1

; to write a byte
; * set D/CX from Pico GPIO
; * jump to write
; * write the byte to PIO FIFO (converted to word)

; to write in burst mode (multiples of 4 byte)
; * set D/CX from Pico GPIO
; * set X to the number of words transmited
; * jump to burst_write
; * write the data to PIO FIFO (packed in words)

; to read data
; * set D/CX from Pico GPIO
; * set X to 8, 25, or 33 ( 8 to read  8 bits; 
;                          25 to read 24 bits; 
;                          33 to read 32 bits)
; * jump to read
; * write the read command byte to PIO FIFO (converted to word)
; * read the data from PIO FIFO

; after any command is done, irq 0 is fired

halt:
    jmp halt                       side 0

write:
    pull                           side 0
    out null, 24                   side 0

    ; set SDA pin to output
    set pindirs, 1                 side 0
write_loop:
    out pins, 1                    side 0
    jmp !osre, write_loop          side 1

    mov isr, x                     side 0
    push                           side 0
    irq 0                          side 0
    jmp halt                       side 0

burst_write:
    pull                           side 0

    ; set SDA pin to output
    set pindirs, 1                 side 0

burst_write_loop:
    out pins, 1                    side 0
    jmp !osre, burst_write_loop    side 1

    ; x is number of words to write
    jmp x--, burst_write           side 0

    mov isr, x                     side 0
    push                           side 0
    irq 0                          side 0
    jmp halt                       side 0

read:
    pull                           side 0
    out null, 24                   side 0

    ; set SDA pin to output
    set pindirs, 1                 side 0
write_read_command:
    out pins, 1                    side 0
    jmp !osre, write_read_command  side 1

    ; set SDA pin to input
    set pindirs, 0                 side 0
read_loop:
    in pins, 1                     side 1
    jmp x--, read_loop             side 0 ; x is number of 

    push                           side 0

    irq 0                          side 0
    jmp halt                       side 0

% c-sdk {
static inline void spi3wire_program_init(PIO pio, uint sm, uint offset, uint dataPin, uint clockPin, float div) {
    pio_gpio_init(pio, dataPin);
    pio_gpio_init(pio, clockPin);
    pio_sm_set_consecutive_pindirs(pio, sm, clockPin, 2, true);
    pio_sm_set_set_pins(pio, sm, dataPin, 1);
    pio_sm_set_out_pins(pio, sm, dataPin, 1);
    pio_sm_set_in_pins(pio, sm, dataPin);
    
    pio_sm_config c = spi3wire_program_get_default_config(offset);

    sm_config_set_set_pins(&c, dataPin, 1);
    sm_config_set_out_pins(&c, dataPin, 1);
    sm_config_set_in_pins(&c, dataPin);

    sm_config_set_sideset(&c, 1, false, false);
    sm_config_set_sideset_pins(&c, clockPin);
    sm_config_set_clkdiv(&c, 16);

    sm_config_set_out_shift(&c, false, false, 32);
    sm_config_set_in_shift(&c, false, false, 33);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}

